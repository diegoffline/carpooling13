#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarpoolingDAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="CarpoolingDB")]
	public partial class CarpoolingDBADataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertCoutry(Coutry instance);
    partial void UpdateCoutry(Coutry instance);
    partial void DeleteCoutry(Coutry instance);
    partial void InsertFirmRoute(FirmRoute instance);
    partial void UpdateFirmRoute(FirmRoute instance);
    partial void DeleteFirmRoute(FirmRoute instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertGroupMember(GroupMember instance);
    partial void UpdateGroupMember(GroupMember instance);
    partial void DeleteGroupMember(GroupMember instance);
    partial void InsertGroupType(GroupType instance);
    partial void UpdateGroupType(GroupType instance);
    partial void DeleteGroupType(GroupType instance);
    partial void InsertLeaveAMessage(LeaveAMessage instance);
    partial void UpdateLeaveAMessage(LeaveAMessage instance);
    partial void DeleteLeaveAMessage(LeaveAMessage instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertResource(Resource instance);
    partial void UpdateResource(Resource instance);
    partial void DeleteResource(Resource instance);
    partial void InsertResourceType(ResourceType instance);
    partial void UpdateResourceType(ResourceType instance);
    partial void DeleteResourceType(ResourceType instance);
    partial void InsertRoute(Route instance);
    partial void UpdateRoute(Route instance);
    partial void DeleteRoute(Route instance);
    partial void InsertRouteType(RouteType instance);
    partial void UpdateRouteType(RouteType instance);
    partial void DeleteRouteType(RouteType instance);
    partial void InsertStartFinish(StartFinish instance);
    partial void UpdateStartFinish(StartFinish instance);
    partial void DeleteStartFinish(StartFinish instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    #endregion
		
		public CarpoolingDBADataContext() : 
				base(global::CarpoolingDAL.Properties.Settings.Default.CarpoolingDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CarpoolingDBADataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CarpoolingDBADataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CarpoolingDBADataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CarpoolingDBADataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Coutry> Coutries
		{
			get
			{
				return this.GetTable<Coutry>();
			}
		}
		
		public System.Data.Linq.Table<FirmRoute> FirmRoutes
		{
			get
			{
				return this.GetTable<FirmRoute>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<GroupMember> GroupMembers
		{
			get
			{
				return this.GetTable<GroupMember>();
			}
		}
		
		public System.Data.Linq.Table<GroupType> GroupTypes
		{
			get
			{
				return this.GetTable<GroupType>();
			}
		}
		
		public System.Data.Linq.Table<LeaveAMessage> LeaveAMessages
		{
			get
			{
				return this.GetTable<LeaveAMessage>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<Resource> Resources
		{
			get
			{
				return this.GetTable<Resource>();
			}
		}
		
		public System.Data.Linq.Table<ResourceType> ResourceTypes
		{
			get
			{
				return this.GetTable<ResourceType>();
			}
		}
		
		public System.Data.Linq.Table<Route> Routes
		{
			get
			{
				return this.GetTable<Route>();
			}
		}
		
		public System.Data.Linq.Table<RouteType> RouteTypes
		{
			get
			{
				return this.GetTable<RouteType>();
			}
		}
		
		public System.Data.Linq.Table<StartFinish> StartFinishes
		{
			get
			{
				return this.GetTable<StartFinish>();
			}
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
	}
	
	[Table(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _postalNumber;
		
		private int _idCity;
		
		private string _name;
		
		private System.Nullable<int> _idCoutry;
		
		private EntitySet<StartFinish> _StartFinishes;
		
		private EntityRef<Coutry> _Coutry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpostalNumberChanging(string value);
    partial void OnpostalNumberChanged();
    partial void OnidCityChanging(int value);
    partial void OnidCityChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnidCoutryChanging(System.Nullable<int> value);
    partial void OnidCoutryChanged();
    #endregion
		
		public City()
		{
			this._StartFinishes = new EntitySet<StartFinish>(new Action<StartFinish>(this.attach_StartFinishes), new Action<StartFinish>(this.detach_StartFinishes));
			this._Coutry = default(EntityRef<Coutry>);
			OnCreated();
		}
		
		[Column(Storage="_postalNumber", DbType="NChar(10)")]
		public string postalNumber
		{
			get
			{
				return this._postalNumber;
			}
			set
			{
				if ((this._postalNumber != value))
				{
					this.OnpostalNumberChanging(value);
					this.SendPropertyChanging();
					this._postalNumber = value;
					this.SendPropertyChanged("postalNumber");
					this.OnpostalNumberChanged();
				}
			}
		}
		
		[Column(Storage="_idCity", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idCity
		{
			get
			{
				return this._idCity;
			}
			set
			{
				if ((this._idCity != value))
				{
					this.OnidCityChanging(value);
					this.SendPropertyChanging();
					this._idCity = value;
					this.SendPropertyChanged("idCity");
					this.OnidCityChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_idCoutry", DbType="Int")]
		public System.Nullable<int> idCoutry
		{
			get
			{
				return this._idCoutry;
			}
			set
			{
				if ((this._idCoutry != value))
				{
					if (this._Coutry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidCoutryChanging(value);
					this.SendPropertyChanging();
					this._idCoutry = value;
					this.SendPropertyChanged("idCoutry");
					this.OnidCoutryChanged();
				}
			}
		}
		
		[Association(Name="City_StartFinish", Storage="_StartFinishes", ThisKey="idCity", OtherKey="idCity")]
		public EntitySet<StartFinish> StartFinishes
		{
			get
			{
				return this._StartFinishes;
			}
			set
			{
				this._StartFinishes.Assign(value);
			}
		}
		
		[Association(Name="Coutry_City", Storage="_Coutry", ThisKey="idCoutry", OtherKey="idCoutry", IsForeignKey=true)]
		public Coutry Coutry
		{
			get
			{
				return this._Coutry.Entity;
			}
			set
			{
				Coutry previousValue = this._Coutry.Entity;
				if (((previousValue != value) 
							|| (this._Coutry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Coutry.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._Coutry.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._idCoutry = value.idCoutry;
					}
					else
					{
						this._idCoutry = default(Nullable<int>);
					}
					this.SendPropertyChanged("Coutry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StartFinishes(StartFinish entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_StartFinishes(StartFinish entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[Table(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idClient;
		
		private string _name;
		
		private string _surname;
		
		private string _contactNumber;
		
		private string _email;
		
		private string _notes;
		
		private string _username;
		
		private string _password;
		
		private EntitySet<FirmRoute> _FirmRoutes;
		
		private EntitySet<GroupMember> _GroupMembers;
		
		private EntitySet<LeaveAMessage> _LeaveAMessages;
		
		private EntitySet<Resource> _Resources;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidClientChanging(int value);
    partial void OnidClientChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsurnameChanging(string value);
    partial void OnsurnameChanged();
    partial void OncontactNumberChanging(string value);
    partial void OncontactNumberChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnnotesChanging(string value);
    partial void OnnotesChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public Client()
		{
			this._FirmRoutes = new EntitySet<FirmRoute>(new Action<FirmRoute>(this.attach_FirmRoutes), new Action<FirmRoute>(this.detach_FirmRoutes));
			this._GroupMembers = new EntitySet<GroupMember>(new Action<GroupMember>(this.attach_GroupMembers), new Action<GroupMember>(this.detach_GroupMembers));
			this._LeaveAMessages = new EntitySet<LeaveAMessage>(new Action<LeaveAMessage>(this.attach_LeaveAMessages), new Action<LeaveAMessage>(this.detach_LeaveAMessages));
			this._Resources = new EntitySet<Resource>(new Action<Resource>(this.attach_Resources), new Action<Resource>(this.detach_Resources));
			OnCreated();
		}
		
		[Column(Storage="_idClient", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idClient
		{
			get
			{
				return this._idClient;
			}
			set
			{
				if ((this._idClient != value))
				{
					this.OnidClientChanging(value);
					this.SendPropertyChanging();
					this._idClient = value;
					this.SendPropertyChanged("idClient");
					this.OnidClientChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_surname", DbType="NChar(50)")]
		public string surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnsurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("surname");
					this.OnsurnameChanged();
				}
			}
		}
		
		[Column(Storage="_contactNumber", DbType="NChar(20)")]
		public string contactNumber
		{
			get
			{
				return this._contactNumber;
			}
			set
			{
				if ((this._contactNumber != value))
				{
					this.OncontactNumberChanging(value);
					this.SendPropertyChanging();
					this._contactNumber = value;
					this.SendPropertyChanged("contactNumber");
					this.OncontactNumberChanged();
				}
			}
		}
		
		[Column(Storage="_email", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[Column(Storage="_notes", DbType="NChar(500)")]
		public string notes
		{
			get
			{
				return this._notes;
			}
			set
			{
				if ((this._notes != value))
				{
					this.OnnotesChanging(value);
					this.SendPropertyChanging();
					this._notes = value;
					this.SendPropertyChanged("notes");
					this.OnnotesChanged();
				}
			}
		}
		
		[Column(Storage="_username", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_password", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[Association(Name="Client_FirmRoute", Storage="_FirmRoutes", ThisKey="idClient", OtherKey="idClient")]
		public EntitySet<FirmRoute> FirmRoutes
		{
			get
			{
				return this._FirmRoutes;
			}
			set
			{
				this._FirmRoutes.Assign(value);
			}
		}
		
		[Association(Name="Client_GroupMember", Storage="_GroupMembers", ThisKey="idClient", OtherKey="idClient")]
		public EntitySet<GroupMember> GroupMembers
		{
			get
			{
				return this._GroupMembers;
			}
			set
			{
				this._GroupMembers.Assign(value);
			}
		}
		
		[Association(Name="Client_LeaveAMessage", Storage="_LeaveAMessages", ThisKey="idClient", OtherKey="client")]
		public EntitySet<LeaveAMessage> LeaveAMessages
		{
			get
			{
				return this._LeaveAMessages;
			}
			set
			{
				this._LeaveAMessages.Assign(value);
			}
		}
		
		[Association(Name="Client_Resource", Storage="_Resources", ThisKey="idClient", OtherKey="owner")]
		public EntitySet<Resource> Resources
		{
			get
			{
				return this._Resources;
			}
			set
			{
				this._Resources.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FirmRoutes(FirmRoute entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_FirmRoutes(FirmRoute entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_LeaveAMessages(LeaveAMessage entity)
		{
			this.SendPropertyChanging();
			entity.Client1 = this;
		}
		
		private void detach_LeaveAMessages(LeaveAMessage entity)
		{
			this.SendPropertyChanging();
			entity.Client1 = null;
		}
		
		private void attach_Resources(Resource entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Resources(Resource entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[Table(Name="dbo.Coutry")]
	public partial class Coutry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idCoutry;
		
		private string _name;
		
		private int _idState;
		
		private EntitySet<City> _Cities;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCoutryChanging(int value);
    partial void OnidCoutryChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnidStateChanging(int value);
    partial void OnidStateChanged();
    #endregion
		
		public Coutry()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[Column(Storage="_idCoutry", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idCoutry
		{
			get
			{
				return this._idCoutry;
			}
			set
			{
				if ((this._idCoutry != value))
				{
					this.OnidCoutryChanging(value);
					this.SendPropertyChanging();
					this._idCoutry = value;
					this.SendPropertyChanged("idCoutry");
					this.OnidCoutryChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_idState", DbType="Int NOT NULL")]
		public int idState
		{
			get
			{
				return this._idState;
			}
			set
			{
				if ((this._idState != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidStateChanging(value);
					this.SendPropertyChanging();
					this._idState = value;
					this.SendPropertyChanged("idState");
					this.OnidStateChanged();
				}
			}
		}
		
		[Association(Name="Coutry_City", Storage="_Cities", ThisKey="idCoutry", OtherKey="idCoutry")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		[Association(Name="State_Coutry", Storage="_State", ThisKey="idState", OtherKey="idState", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Coutries.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Coutries.Add(this);
						this._idState = value.idState;
					}
					else
					{
						this._idState = default(int);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Coutry = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Coutry = null;
		}
	}
	
	[Table(Name="dbo.FirmRoute")]
	public partial class FirmRoute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idClient;
		
		private int _idRoute;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Route> _Route;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidClientChanging(int value);
    partial void OnidClientChanged();
    partial void OnidRouteChanging(int value);
    partial void OnidRouteChanged();
    #endregion
		
		public FirmRoute()
		{
			this._Client = default(EntityRef<Client>);
			this._Route = default(EntityRef<Route>);
			OnCreated();
		}
		
		[Column(Storage="_idClient", DbType="Int NOT NULL")]
		public int idClient
		{
			get
			{
				return this._idClient;
			}
			set
			{
				if ((this._idClient != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidClientChanging(value);
					this.SendPropertyChanging();
					this._idClient = value;
					this.SendPropertyChanged("idClient");
					this.OnidClientChanged();
				}
			}
		}
		
		[Column(Storage="_idRoute", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idRoute
		{
			get
			{
				return this._idRoute;
			}
			set
			{
				if ((this._idRoute != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidRouteChanging(value);
					this.SendPropertyChanging();
					this._idRoute = value;
					this.SendPropertyChanged("idRoute");
					this.OnidRouteChanged();
				}
			}
		}
		
		[Association(Name="Client_FirmRoute", Storage="_Client", ThisKey="idClient", OtherKey="idClient", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.FirmRoutes.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.FirmRoutes.Add(this);
						this._idClient = value.idClient;
					}
					else
					{
						this._idClient = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[Association(Name="Route_FirmRoute", Storage="_Route", ThisKey="idRoute", OtherKey="idRoute", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.FirmRoute = null;
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.FirmRoute = this;
						this._idRoute = value.idRoute;
					}
					else
					{
						this._idRoute = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idGroup;
		
		private System.DateTime _startTime;
		
		private System.Nullable<decimal> _startRange;
		
		private System.Nullable<decimal> _destinationRange;
		
		private System.Nullable<double> _totalCost;
		
		private int _route;
		
		private int _groupType;
		
		private EntitySet<GroupMember> _GroupMembers;
		
		private EntitySet<LeaveAMessage> _LeaveAMessages;
		
		private EntityRef<GroupType> _GroupType1;
		
		private EntityRef<Route> _Route1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidGroupChanging(int value);
    partial void OnidGroupChanged();
    partial void OnstartTimeChanging(System.DateTime value);
    partial void OnstartTimeChanged();
    partial void OnstartRangeChanging(System.Nullable<decimal> value);
    partial void OnstartRangeChanged();
    partial void OndestinationRangeChanging(System.Nullable<decimal> value);
    partial void OndestinationRangeChanged();
    partial void OntotalCostChanging(System.Nullable<double> value);
    partial void OntotalCostChanged();
    partial void OnrouteChanging(int value);
    partial void OnrouteChanged();
    partial void OngroupTypeChanging(int value);
    partial void OngroupTypeChanged();
    #endregion
		
		public Group()
		{
			this._GroupMembers = new EntitySet<GroupMember>(new Action<GroupMember>(this.attach_GroupMembers), new Action<GroupMember>(this.detach_GroupMembers));
			this._LeaveAMessages = new EntitySet<LeaveAMessage>(new Action<LeaveAMessage>(this.attach_LeaveAMessages), new Action<LeaveAMessage>(this.detach_LeaveAMessages));
			this._GroupType1 = default(EntityRef<GroupType>);
			this._Route1 = default(EntityRef<Route>);
			OnCreated();
		}
		
		[Column(Storage="_idGroup", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idGroup
		{
			get
			{
				return this._idGroup;
			}
			set
			{
				if ((this._idGroup != value))
				{
					this.OnidGroupChanging(value);
					this.SendPropertyChanging();
					this._idGroup = value;
					this.SendPropertyChanged("idGroup");
					this.OnidGroupChanged();
				}
			}
		}
		
		[Column(Storage="_startTime", DbType="DateTime NOT NULL")]
		public System.DateTime startTime
		{
			get
			{
				return this._startTime;
			}
			set
			{
				if ((this._startTime != value))
				{
					this.OnstartTimeChanging(value);
					this.SendPropertyChanging();
					this._startTime = value;
					this.SendPropertyChanged("startTime");
					this.OnstartTimeChanged();
				}
			}
		}
		
		[Column(Storage="_startRange", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> startRange
		{
			get
			{
				return this._startRange;
			}
			set
			{
				if ((this._startRange != value))
				{
					this.OnstartRangeChanging(value);
					this.SendPropertyChanging();
					this._startRange = value;
					this.SendPropertyChanged("startRange");
					this.OnstartRangeChanged();
				}
			}
		}
		
		[Column(Storage="_destinationRange", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> destinationRange
		{
			get
			{
				return this._destinationRange;
			}
			set
			{
				if ((this._destinationRange != value))
				{
					this.OndestinationRangeChanging(value);
					this.SendPropertyChanging();
					this._destinationRange = value;
					this.SendPropertyChanged("destinationRange");
					this.OndestinationRangeChanged();
				}
			}
		}
		
		[Column(Storage="_totalCost", DbType="Float")]
		public System.Nullable<double> totalCost
		{
			get
			{
				return this._totalCost;
			}
			set
			{
				if ((this._totalCost != value))
				{
					this.OntotalCostChanging(value);
					this.SendPropertyChanging();
					this._totalCost = value;
					this.SendPropertyChanged("totalCost");
					this.OntotalCostChanged();
				}
			}
		}
		
		[Column(Storage="_route", DbType="Int NOT NULL")]
		public int route
		{
			get
			{
				return this._route;
			}
			set
			{
				if ((this._route != value))
				{
					if (this._Route1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrouteChanging(value);
					this.SendPropertyChanging();
					this._route = value;
					this.SendPropertyChanged("route");
					this.OnrouteChanged();
				}
			}
		}
		
		[Column(Storage="_groupType", DbType="Int NOT NULL")]
		public int groupType
		{
			get
			{
				return this._groupType;
			}
			set
			{
				if ((this._groupType != value))
				{
					if (this._GroupType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngroupTypeChanging(value);
					this.SendPropertyChanging();
					this._groupType = value;
					this.SendPropertyChanged("groupType");
					this.OngroupTypeChanged();
				}
			}
		}
		
		[Association(Name="Group_GroupMember", Storage="_GroupMembers", ThisKey="idGroup", OtherKey="idGroup")]
		public EntitySet<GroupMember> GroupMembers
		{
			get
			{
				return this._GroupMembers;
			}
			set
			{
				this._GroupMembers.Assign(value);
			}
		}
		
		[Association(Name="Group_LeaveAMessage", Storage="_LeaveAMessages", ThisKey="idGroup", OtherKey="idGroup")]
		public EntitySet<LeaveAMessage> LeaveAMessages
		{
			get
			{
				return this._LeaveAMessages;
			}
			set
			{
				this._LeaveAMessages.Assign(value);
			}
		}
		
		[Association(Name="GroupType_Group", Storage="_GroupType1", ThisKey="groupType", OtherKey="idGroupType", IsForeignKey=true)]
		public GroupType GroupType1
		{
			get
			{
				return this._GroupType1.Entity;
			}
			set
			{
				GroupType previousValue = this._GroupType1.Entity;
				if (((previousValue != value) 
							|| (this._GroupType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupType1.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._GroupType1.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._groupType = value.idGroupType;
					}
					else
					{
						this._groupType = default(int);
					}
					this.SendPropertyChanged("GroupType1");
				}
			}
		}
		
		[Association(Name="Route_Group", Storage="_Route1", ThisKey="route", OtherKey="idRoute", IsForeignKey=true)]
		public Route Route1
		{
			get
			{
				return this._Route1.Entity;
			}
			set
			{
				Route previousValue = this._Route1.Entity;
				if (((previousValue != value) 
							|| (this._Route1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route1.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._Route1.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._route = value.idRoute;
					}
					else
					{
						this._route = default(int);
					}
					this.SendPropertyChanged("Route1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_LeaveAMessages(LeaveAMessage entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_LeaveAMessages(LeaveAMessage entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[Table(Name="dbo.GroupMember")]
	public partial class GroupMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idGroup;
		
		private int _idClient;
		
		private System.Nullable<int> _resource;
		
		private string _notesInGroup;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Resource> _Resource1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidGroupChanging(int value);
    partial void OnidGroupChanged();
    partial void OnidClientChanging(int value);
    partial void OnidClientChanged();
    partial void OnresourceChanging(System.Nullable<int> value);
    partial void OnresourceChanged();
    partial void OnnotesInGroupChanging(string value);
    partial void OnnotesInGroupChanged();
    #endregion
		
		public GroupMember()
		{
			this._Group = default(EntityRef<Group>);
			this._Client = default(EntityRef<Client>);
			this._Resource1 = default(EntityRef<Resource>);
			OnCreated();
		}
		
		[Column(Storage="_idGroup", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idGroup
		{
			get
			{
				return this._idGroup;
			}
			set
			{
				if ((this._idGroup != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidGroupChanging(value);
					this.SendPropertyChanging();
					this._idGroup = value;
					this.SendPropertyChanged("idGroup");
					this.OnidGroupChanged();
				}
			}
		}
		
		[Column(Storage="_idClient", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idClient
		{
			get
			{
				return this._idClient;
			}
			set
			{
				if ((this._idClient != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidClientChanging(value);
					this.SendPropertyChanging();
					this._idClient = value;
					this.SendPropertyChanged("idClient");
					this.OnidClientChanged();
				}
			}
		}
		
		[Column(Storage="_resource", DbType="Int")]
		public System.Nullable<int> resource
		{
			get
			{
				return this._resource;
			}
			set
			{
				if ((this._resource != value))
				{
					if (this._Resource1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnresourceChanging(value);
					this.SendPropertyChanging();
					this._resource = value;
					this.SendPropertyChanged("resource");
					this.OnresourceChanged();
				}
			}
		}
		
		[Column(Storage="_notesInGroup", DbType="NChar(500)")]
		public string notesInGroup
		{
			get
			{
				return this._notesInGroup;
			}
			set
			{
				if ((this._notesInGroup != value))
				{
					this.OnnotesInGroupChanging(value);
					this.SendPropertyChanging();
					this._notesInGroup = value;
					this.SendPropertyChanged("notesInGroup");
					this.OnnotesInGroupChanged();
				}
			}
		}
		
		[Association(Name="Group_GroupMember", Storage="_Group", ThisKey="idGroup", OtherKey="idGroup", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupMembers.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupMembers.Add(this);
						this._idGroup = value.idGroup;
					}
					else
					{
						this._idGroup = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[Association(Name="Client_GroupMember", Storage="_Client", ThisKey="idClient", OtherKey="idClient", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.GroupMembers.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.GroupMembers.Add(this);
						this._idClient = value.idClient;
					}
					else
					{
						this._idClient = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[Association(Name="Resource_GroupMember", Storage="_Resource1", ThisKey="resource", OtherKey="idResource", IsForeignKey=true)]
		public Resource Resource1
		{
			get
			{
				return this._Resource1.Entity;
			}
			set
			{
				Resource previousValue = this._Resource1.Entity;
				if (((previousValue != value) 
							|| (this._Resource1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource1.Entity = null;
						previousValue.GroupMembers.Remove(this);
					}
					this._Resource1.Entity = value;
					if ((value != null))
					{
						value.GroupMembers.Add(this);
						this._resource = value.idResource;
					}
					else
					{
						this._resource = default(Nullable<int>);
					}
					this.SendPropertyChanged("Resource1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.GroupType")]
	public partial class GroupType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idGroupType;
		
		private string _name;
		
		private EntitySet<Group> _Groups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidGroupTypeChanging(int value);
    partial void OnidGroupTypeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public GroupType()
		{
			this._Groups = new EntitySet<Group>(new Action<Group>(this.attach_Groups), new Action<Group>(this.detach_Groups));
			OnCreated();
		}
		
		[Column(Storage="_idGroupType", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idGroupType
		{
			get
			{
				return this._idGroupType;
			}
			set
			{
				if ((this._idGroupType != value))
				{
					this.OnidGroupTypeChanging(value);
					this.SendPropertyChanging();
					this._idGroupType = value;
					this.SendPropertyChanged("idGroupType");
					this.OnidGroupTypeChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Association(Name="GroupType_Group", Storage="_Groups", ThisKey="idGroupType", OtherKey="groupType")]
		public EntitySet<Group> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.GroupType1 = this;
		}
		
		private void detach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.GroupType1 = null;
		}
	}
	
	[Table(Name="dbo.LeaveAMessage")]
	public partial class LeaveAMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idMessage;
		
		private int _idGroup;
		
		private int _client;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Client> _Client1;
		
		private EntityRef<Message> _Message;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidMessageChanging(int value);
    partial void OnidMessageChanged();
    partial void OnidGroupChanging(int value);
    partial void OnidGroupChanged();
    partial void OnclientChanging(int value);
    partial void OnclientChanged();
    #endregion
		
		public LeaveAMessage()
		{
			this._Group = default(EntityRef<Group>);
			this._Client1 = default(EntityRef<Client>);
			this._Message = default(EntityRef<Message>);
			OnCreated();
		}
		
		[Column(Storage="_idMessage", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idMessage
		{
			get
			{
				return this._idMessage;
			}
			set
			{
				if ((this._idMessage != value))
				{
					if (this._Message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidMessageChanging(value);
					this.SendPropertyChanging();
					this._idMessage = value;
					this.SendPropertyChanged("idMessage");
					this.OnidMessageChanged();
				}
			}
		}
		
		[Column(Storage="_idGroup", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idGroup
		{
			get
			{
				return this._idGroup;
			}
			set
			{
				if ((this._idGroup != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidGroupChanging(value);
					this.SendPropertyChanging();
					this._idGroup = value;
					this.SendPropertyChanged("idGroup");
					this.OnidGroupChanged();
				}
			}
		}
		
		[Column(Storage="_client", DbType="Int NOT NULL")]
		public int client
		{
			get
			{
				return this._client;
			}
			set
			{
				if ((this._client != value))
				{
					if (this._Client1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclientChanging(value);
					this.SendPropertyChanging();
					this._client = value;
					this.SendPropertyChanged("client");
					this.OnclientChanged();
				}
			}
		}
		
		[Association(Name="Group_LeaveAMessage", Storage="_Group", ThisKey="idGroup", OtherKey="idGroup", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.LeaveAMessages.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.LeaveAMessages.Add(this);
						this._idGroup = value.idGroup;
					}
					else
					{
						this._idGroup = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[Association(Name="Client_LeaveAMessage", Storage="_Client1", ThisKey="client", OtherKey="idClient", IsForeignKey=true)]
		public Client Client1
		{
			get
			{
				return this._Client1.Entity;
			}
			set
			{
				Client previousValue = this._Client1.Entity;
				if (((previousValue != value) 
							|| (this._Client1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client1.Entity = null;
						previousValue.LeaveAMessages.Remove(this);
					}
					this._Client1.Entity = value;
					if ((value != null))
					{
						value.LeaveAMessages.Add(this);
						this._client = value.idClient;
					}
					else
					{
						this._client = default(int);
					}
					this.SendPropertyChanged("Client1");
				}
			}
		}
		
		[Association(Name="Message_LeaveAMessage", Storage="_Message", ThisKey="idMessage", OtherKey="idMessage", IsForeignKey=true)]
		public Message Message
		{
			get
			{
				return this._Message.Entity;
			}
			set
			{
				Message previousValue = this._Message.Entity;
				if (((previousValue != value) 
							|| (this._Message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message.Entity = null;
						previousValue.LeaveAMessages.Remove(this);
					}
					this._Message.Entity = value;
					if ((value != null))
					{
						value.LeaveAMessages.Add(this);
						this._idMessage = value.idMessage;
					}
					else
					{
						this._idMessage = default(int);
					}
					this.SendPropertyChanged("Message");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Message")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _time;
		
		private string _message1;
		
		private int _idMessage;
		
		private EntitySet<LeaveAMessage> _LeaveAMessages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntimeChanging(System.DateTime value);
    partial void OntimeChanged();
    partial void Onmessage1Changing(string value);
    partial void Onmessage1Changed();
    partial void OnidMessageChanging(int value);
    partial void OnidMessageChanged();
    #endregion
		
		public Message()
		{
			this._LeaveAMessages = new EntitySet<LeaveAMessage>(new Action<LeaveAMessage>(this.attach_LeaveAMessages), new Action<LeaveAMessage>(this.detach_LeaveAMessages));
			OnCreated();
		}
		
		[Column(Storage="_time", DbType="DateTime NOT NULL")]
		public System.DateTime time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[Column(Name="message", Storage="_message1", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string message1
		{
			get
			{
				return this._message1;
			}
			set
			{
				if ((this._message1 != value))
				{
					this.Onmessage1Changing(value);
					this.SendPropertyChanging();
					this._message1 = value;
					this.SendPropertyChanged("message1");
					this.Onmessage1Changed();
				}
			}
		}
		
		[Column(Storage="_idMessage", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idMessage
		{
			get
			{
				return this._idMessage;
			}
			set
			{
				if ((this._idMessage != value))
				{
					this.OnidMessageChanging(value);
					this.SendPropertyChanging();
					this._idMessage = value;
					this.SendPropertyChanged("idMessage");
					this.OnidMessageChanged();
				}
			}
		}
		
		[Association(Name="Message_LeaveAMessage", Storage="_LeaveAMessages", ThisKey="idMessage", OtherKey="idMessage")]
		public EntitySet<LeaveAMessage> LeaveAMessages
		{
			get
			{
				return this._LeaveAMessages;
			}
			set
			{
				this._LeaveAMessages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LeaveAMessages(LeaveAMessage entity)
		{
			this.SendPropertyChanging();
			entity.Message = this;
		}
		
		private void detach_LeaveAMessages(LeaveAMessage entity)
		{
			this.SendPropertyChanging();
			entity.Message = null;
		}
	}
	
	[Table(Name="dbo.Resource")]
	public partial class Resource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idResource;
		
		private System.Nullable<int> _ResourceType;
		
		private string _name;
		
		private System.Nullable<System.DateTime> _age;
		
		private int _seatNumber;
		
		private double _consumption;
		
		private int _owner;
		
		private EntitySet<GroupMember> _GroupMembers;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<ResourceType> _ResourceType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidResourceChanging(int value);
    partial void OnidResourceChanged();
    partial void OnResourceTypeChanging(System.Nullable<int> value);
    partial void OnResourceTypeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnageChanging(System.Nullable<System.DateTime> value);
    partial void OnageChanged();
    partial void OnseatNumberChanging(int value);
    partial void OnseatNumberChanged();
    partial void OnconsumptionChanging(double value);
    partial void OnconsumptionChanged();
    partial void OnownerChanging(int value);
    partial void OnownerChanged();
    #endregion
		
		public Resource()
		{
			this._GroupMembers = new EntitySet<GroupMember>(new Action<GroupMember>(this.attach_GroupMembers), new Action<GroupMember>(this.detach_GroupMembers));
			this._Client = default(EntityRef<Client>);
			this._ResourceType1 = default(EntityRef<ResourceType>);
			OnCreated();
		}
		
		[Column(Storage="_idResource", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idResource
		{
			get
			{
				return this._idResource;
			}
			set
			{
				if ((this._idResource != value))
				{
					this.OnidResourceChanging(value);
					this.SendPropertyChanging();
					this._idResource = value;
					this.SendPropertyChanged("idResource");
					this.OnidResourceChanged();
				}
			}
		}
		
		[Column(Storage="_ResourceType", DbType="Int")]
		public System.Nullable<int> ResourceType
		{
			get
			{
				return this._ResourceType;
			}
			set
			{
				if ((this._ResourceType != value))
				{
					if (this._ResourceType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceTypeChanging(value);
					this.SendPropertyChanging();
					this._ResourceType = value;
					this.SendPropertyChanged("ResourceType");
					this.OnResourceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_age", DbType="DateTime")]
		public System.Nullable<System.DateTime> age
		{
			get
			{
				return this._age;
			}
			set
			{
				if ((this._age != value))
				{
					this.OnageChanging(value);
					this.SendPropertyChanging();
					this._age = value;
					this.SendPropertyChanged("age");
					this.OnageChanged();
				}
			}
		}
		
		[Column(Storage="_seatNumber", DbType="Int NOT NULL")]
		public int seatNumber
		{
			get
			{
				return this._seatNumber;
			}
			set
			{
				if ((this._seatNumber != value))
				{
					this.OnseatNumberChanging(value);
					this.SendPropertyChanging();
					this._seatNumber = value;
					this.SendPropertyChanged("seatNumber");
					this.OnseatNumberChanged();
				}
			}
		}
		
		[Column(Storage="_consumption", DbType="Float NOT NULL")]
		public double consumption
		{
			get
			{
				return this._consumption;
			}
			set
			{
				if ((this._consumption != value))
				{
					this.OnconsumptionChanging(value);
					this.SendPropertyChanging();
					this._consumption = value;
					this.SendPropertyChanged("consumption");
					this.OnconsumptionChanged();
				}
			}
		}
		
		[Column(Storage="_owner", DbType="Int NOT NULL")]
		public int owner
		{
			get
			{
				return this._owner;
			}
			set
			{
				if ((this._owner != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnownerChanging(value);
					this.SendPropertyChanging();
					this._owner = value;
					this.SendPropertyChanged("owner");
					this.OnownerChanged();
				}
			}
		}
		
		[Association(Name="Resource_GroupMember", Storage="_GroupMembers", ThisKey="idResource", OtherKey="resource")]
		public EntitySet<GroupMember> GroupMembers
		{
			get
			{
				return this._GroupMembers;
			}
			set
			{
				this._GroupMembers.Assign(value);
			}
		}
		
		[Association(Name="Client_Resource", Storage="_Client", ThisKey="owner", OtherKey="idClient", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Resources.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Resources.Add(this);
						this._owner = value.idClient;
					}
					else
					{
						this._owner = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[Association(Name="ResourceType_Resource", Storage="_ResourceType1", ThisKey="ResourceType", OtherKey="idResourceType", IsForeignKey=true)]
		public ResourceType ResourceType1
		{
			get
			{
				return this._ResourceType1.Entity;
			}
			set
			{
				ResourceType previousValue = this._ResourceType1.Entity;
				if (((previousValue != value) 
							|| (this._ResourceType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceType1.Entity = null;
						previousValue.Resources.Remove(this);
					}
					this._ResourceType1.Entity = value;
					if ((value != null))
					{
						value.Resources.Add(this);
						this._ResourceType = value.idResourceType;
					}
					else
					{
						this._ResourceType = default(Nullable<int>);
					}
					this.SendPropertyChanged("ResourceType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.Resource1 = this;
		}
		
		private void detach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.Resource1 = null;
		}
	}
	
	[Table(Name="dbo.ResourceType")]
	public partial class ResourceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idResourceType;
		
		private string _name;
		
		private EntitySet<Resource> _Resources;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidResourceTypeChanging(int value);
    partial void OnidResourceTypeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public ResourceType()
		{
			this._Resources = new EntitySet<Resource>(new Action<Resource>(this.attach_Resources), new Action<Resource>(this.detach_Resources));
			OnCreated();
		}
		
		[Column(Storage="_idResourceType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idResourceType
		{
			get
			{
				return this._idResourceType;
			}
			set
			{
				if ((this._idResourceType != value))
				{
					this.OnidResourceTypeChanging(value);
					this.SendPropertyChanging();
					this._idResourceType = value;
					this.SendPropertyChanged("idResourceType");
					this.OnidResourceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Association(Name="ResourceType_Resource", Storage="_Resources", ThisKey="idResourceType", OtherKey="ResourceType")]
		public EntitySet<Resource> Resources
		{
			get
			{
				return this._Resources;
			}
			set
			{
				this._Resources.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Resources(Resource entity)
		{
			this.SendPropertyChanging();
			entity.ResourceType1 = this;
		}
		
		private void detach_Resources(Resource entity)
		{
			this.SendPropertyChanging();
			entity.ResourceType1 = null;
		}
	}
	
	[Table(Name="dbo.Route")]
	public partial class Route : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idRoute;
		
		private System.Data.Linq.Binary _path;
		
		private int _routeType;
		
		private EntityRef<FirmRoute> _FirmRoute;
		
		private EntitySet<Group> _Groups;
		
		private EntitySet<StartFinish> _StartFinishes;
		
		private EntityRef<RouteType> _RouteType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidRouteChanging(int value);
    partial void OnidRouteChanged();
    partial void OnpathChanging(System.Data.Linq.Binary value);
    partial void OnpathChanged();
    partial void OnrouteTypeChanging(int value);
    partial void OnrouteTypeChanged();
    #endregion
		
		public Route()
		{
			this._FirmRoute = default(EntityRef<FirmRoute>);
			this._Groups = new EntitySet<Group>(new Action<Group>(this.attach_Groups), new Action<Group>(this.detach_Groups));
			this._StartFinishes = new EntitySet<StartFinish>(new Action<StartFinish>(this.attach_StartFinishes), new Action<StartFinish>(this.detach_StartFinishes));
			this._RouteType1 = default(EntityRef<RouteType>);
			OnCreated();
		}
		
		[Column(Storage="_idRoute", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idRoute
		{
			get
			{
				return this._idRoute;
			}
			set
			{
				if ((this._idRoute != value))
				{
					this.OnidRouteChanging(value);
					this.SendPropertyChanging();
					this._idRoute = value;
					this.SendPropertyChanged("idRoute");
					this.OnidRouteChanged();
				}
			}
		}
		
		[Column(Storage="_path", DbType="Binary(500) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary path
		{
			get
			{
				return this._path;
			}
			set
			{
				if ((this._path != value))
				{
					this.OnpathChanging(value);
					this.SendPropertyChanging();
					this._path = value;
					this.SendPropertyChanged("path");
					this.OnpathChanged();
				}
			}
		}
		
		[Column(Storage="_routeType", DbType="Int NOT NULL")]
		public int routeType
		{
			get
			{
				return this._routeType;
			}
			set
			{
				if ((this._routeType != value))
				{
					if (this._RouteType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrouteTypeChanging(value);
					this.SendPropertyChanging();
					this._routeType = value;
					this.SendPropertyChanged("routeType");
					this.OnrouteTypeChanged();
				}
			}
		}
		
		[Association(Name="Route_FirmRoute", Storage="_FirmRoute", ThisKey="idRoute", OtherKey="idRoute", IsUnique=true, IsForeignKey=false)]
		public FirmRoute FirmRoute
		{
			get
			{
				return this._FirmRoute.Entity;
			}
			set
			{
				FirmRoute previousValue = this._FirmRoute.Entity;
				if (((previousValue != value) 
							|| (this._FirmRoute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FirmRoute.Entity = null;
						previousValue.Route = null;
					}
					this._FirmRoute.Entity = value;
					if ((value != null))
					{
						value.Route = this;
					}
					this.SendPropertyChanged("FirmRoute");
				}
			}
		}
		
		[Association(Name="Route_Group", Storage="_Groups", ThisKey="idRoute", OtherKey="route")]
		public EntitySet<Group> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		[Association(Name="Route_StartFinish", Storage="_StartFinishes", ThisKey="idRoute", OtherKey="idRoute")]
		public EntitySet<StartFinish> StartFinishes
		{
			get
			{
				return this._StartFinishes;
			}
			set
			{
				this._StartFinishes.Assign(value);
			}
		}
		
		[Association(Name="RouteType_Route", Storage="_RouteType1", ThisKey="routeType", OtherKey="idRouteType", IsForeignKey=true)]
		public RouteType RouteType1
		{
			get
			{
				return this._RouteType1.Entity;
			}
			set
			{
				RouteType previousValue = this._RouteType1.Entity;
				if (((previousValue != value) 
							|| (this._RouteType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RouteType1.Entity = null;
						previousValue.Routes.Remove(this);
					}
					this._RouteType1.Entity = value;
					if ((value != null))
					{
						value.Routes.Add(this);
						this._routeType = value.idRouteType;
					}
					else
					{
						this._routeType = default(int);
					}
					this.SendPropertyChanged("RouteType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Route1 = this;
		}
		
		private void detach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Route1 = null;
		}
		
		private void attach_StartFinishes(StartFinish entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_StartFinishes(StartFinish entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
	}
	
	[Table(Name="dbo.RouteType")]
	public partial class RouteType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idRouteType;
		
		private string _name;
		
		private EntitySet<Route> _Routes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidRouteTypeChanging(int value);
    partial void OnidRouteTypeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public RouteType()
		{
			this._Routes = new EntitySet<Route>(new Action<Route>(this.attach_Routes), new Action<Route>(this.detach_Routes));
			OnCreated();
		}
		
		[Column(Storage="_idRouteType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idRouteType
		{
			get
			{
				return this._idRouteType;
			}
			set
			{
				if ((this._idRouteType != value))
				{
					this.OnidRouteTypeChanging(value);
					this.SendPropertyChanging();
					this._idRouteType = value;
					this.SendPropertyChanged("idRouteType");
					this.OnidRouteTypeChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Association(Name="RouteType_Route", Storage="_Routes", ThisKey="idRouteType", OtherKey="routeType")]
		public EntitySet<Route> Routes
		{
			get
			{
				return this._Routes;
			}
			set
			{
				this._Routes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.RouteType1 = this;
		}
		
		private void detach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.RouteType1 = null;
		}
	}
	
	[Table(Name="dbo.StartFinish")]
	public partial class StartFinish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idCity;
		
		private int _idRoute;
		
		private bool _direction;
		
		private string _address;
		
		private EntityRef<City> _City;
		
		private EntityRef<Route> _Route;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCityChanging(int value);
    partial void OnidCityChanged();
    partial void OnidRouteChanging(int value);
    partial void OnidRouteChanged();
    partial void OndirectionChanging(bool value);
    partial void OndirectionChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    #endregion
		
		public StartFinish()
		{
			this._City = default(EntityRef<City>);
			this._Route = default(EntityRef<Route>);
			OnCreated();
		}
		
		[Column(Storage="_idCity", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idCity
		{
			get
			{
				return this._idCity;
			}
			set
			{
				if ((this._idCity != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidCityChanging(value);
					this.SendPropertyChanging();
					this._idCity = value;
					this.SendPropertyChanged("idCity");
					this.OnidCityChanged();
				}
			}
		}
		
		[Column(Storage="_idRoute", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idRoute
		{
			get
			{
				return this._idRoute;
			}
			set
			{
				if ((this._idRoute != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidRouteChanging(value);
					this.SendPropertyChanging();
					this._idRoute = value;
					this.SendPropertyChanged("idRoute");
					this.OnidRouteChanged();
				}
			}
		}
		
		[Column(Storage="_direction", DbType="Bit NOT NULL", IsPrimaryKey=true)]
		public bool direction
		{
			get
			{
				return this._direction;
			}
			set
			{
				if ((this._direction != value))
				{
					this.OndirectionChanging(value);
					this.SendPropertyChanging();
					this._direction = value;
					this.SendPropertyChanged("direction");
					this.OndirectionChanged();
				}
			}
		}
		
		[Column(Storage="_address", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[Association(Name="City_StartFinish", Storage="_City", ThisKey="idCity", OtherKey="idCity", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.StartFinishes.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.StartFinishes.Add(this);
						this._idCity = value.idCity;
					}
					else
					{
						this._idCity = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[Association(Name="Route_StartFinish", Storage="_Route", ThisKey="idRoute", OtherKey="idRoute", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.StartFinishes.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.StartFinishes.Add(this);
						this._idRoute = value.idRoute;
					}
					else
					{
						this._idRoute = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.State")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idState;
		
		private string _name;
		
		private EntitySet<Coutry> _Coutries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidStateChanging(int value);
    partial void OnidStateChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public State()
		{
			this._Coutries = new EntitySet<Coutry>(new Action<Coutry>(this.attach_Coutries), new Action<Coutry>(this.detach_Coutries));
			OnCreated();
		}
		
		[Column(Storage="_idState", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idState
		{
			get
			{
				return this._idState;
			}
			set
			{
				if ((this._idState != value))
				{
					this.OnidStateChanging(value);
					this.SendPropertyChanging();
					this._idState = value;
					this.SendPropertyChanged("idState");
					this.OnidStateChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Association(Name="State_Coutry", Storage="_Coutries", ThisKey="idState", OtherKey="idState")]
		public EntitySet<Coutry> Coutries
		{
			get
			{
				return this._Coutries;
			}
			set
			{
				this._Coutries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Coutries(Coutry entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Coutries(Coutry entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
	}
}
#pragma warning restore 1591
